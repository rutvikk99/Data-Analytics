MERN STACK DEVELOPMENT
***********************************************************
REACT-library of js to build highly reactive ui
handle user input
communicate with backend
NODE.JS-A server side Runtime ,execute js outside browser or to create web server
req and res ,execute server side logic ,interect with database and files
EXPRESS.JS-framework which simplifies writing Server side code and logic,include routing,view rendering,functionalities,middleware based
MONGODB-nosql db to store data in documents as collection ,no schema or relation, easy to connect to node express (not to react!)

///////////////////////////////////////////////////////////
MERN- The Big Picture
client-ReactJs -single page application ,presentation Ui
Server-Logic ,data storage,Authentication logic
data exchange is done typically in the json format 

how to excel in coding 
watch-code Along-pause &Rewind -Practice on your own -debug & Search-become mern stack master 

---------------------------------------------------------------------------
MERN Theory-
react is used as front end library for presentation and ui
nodejs express js are used for writing logic ,file storage
data in json format 
MongoDB-Persistant Data Storage .database queries with server side and not with client side because credentials would be exposed in client side code that will be huge security issue

THE FRONT END(CLIENT)
React SPA
Routes with react router-dom ---Route config +page components
State Management(Hooks,Redux)---Redux logic,hooks
Components+Styling---utility /UI components 

THE BACKEND(SERVER)
Decoupled Ends Backend==API REST or GRAPHQL (CRUD)
REST API =different urls +http verbs
GRAPH = 1 URL+1 HTTP ENDPOINT that accepts query language
NODE +EXPRESS API
CLIENT<---------------->SERVER (node/express)+logic+mongodb
POST/post
GET/get
PUT/get
More than GET & POST
PUT,PATCH ,DELETE ,OPTIONS

HOW DOES GRAPHQL WORKS
POST request contains QUERY expression to define the data and it has single point  endpoint

Rest api uses path+ http andis stateless and decoupled with frontend easy to use
graphql used query and is stateless and less common because you need to learn query language

ways of connecting Node + React
1)server host node api + react spa -api handling incoming requests and not targeting api returns to react spa -Data is exchanged in json format 
2)Two serparated servers -node api handles incoming request ,react spa served from separate static host-data in json format
3) node+express server -server side rendered + react components


to start the server and app 
npm start 
node filename.js

npm install // to install dependencies


***************HOW TO CREATE AN APP OR WEBSITE***************** 
come up with idea/solve a problem
create a design or sketch 
plan your data models (the data that you'll work with)
plan your endpoints(API, backend) and pages(SPA,frontend)

 1 THE IDEA

ex:build an app where users can share places (with images& location) with other users
all crud methods
multiple data models ,image upload ,input validation
authentication and authorization required

SKETCH THE FRONTEND
pages how ui will look image postion etc

2 APP DATA


USERS
name,email,password,image
PLACES
title,description,address,location(longitude+latitude)
image
one user can create many places but one place per user

3 API ENDPOINTS


/api/users/..
GET.../ -  retrive all users
post../signup -create new user +log in
post../login- log user in 
/api/places/..
get../user/:uid - get all user id
get../pid-get a specific place by pid
post../ -create a new place
patch../pid-update place by id/(pid)
delete../:pid-delete a place by id(pid)


4 SPA PAGES

/-list of users---------------always reachable
/:uid/places -list of places for selected user ---always reachable
/authenticate-SIgnup +login forms---------only unauthenticated
/places/new -new place form --------------only authenticated
/places/pid -update place form------------only unauthenticated


==============================================================================
REACT REFRESHER
js library to build user interfaces
declarative approach:define the result,not the steps that lead to result 
define components and build your ui with these components
React is all about components that components are functions that return J S X or JavaScript classes with a render method which we don't use here
though that components can receive props to receive data from parent components that props can also
receive functions pointers at functions so that the child component the component used in a natural
component can communicate back to its parent component so to the component using it and that you have
this very important concept of state which allows you to manage data that when changed with one of the
state updating functions actually causes react re rendered a component and re rendered to JSX code
and re-evaluate what needs to be output on the screen.




REACT JSX (javascript xml)
allow us to write html code in reactjs
<h1 title=""> <h1/>
React.createlement( 'h1',{title:''})	

USING COMPONENTS

cannot return objects in react
export function name starting with a Capital letter 


USING PROPS TO PASS DATA BETWEEN COMPONENTS
property in react to assign value 


RENDERING LIST OF DATA
map() returns array of the props value

HANDLING EVENTS
eg:onSubmit console text

CHILD PARENT COMMUNICATION

You can also pass data back and you still do this with props.
The idea just is that instead of having props that pass in data like a string or an array or an object
to the lower level to the child component as it's also called you pass a callback function from the
parent component to the child component.
So no array or anything like that but a callbck function
So passing the goal from the lower level from the child component the new goal component to the parent
component the app component in this case works and it works with props we just use props to parse a
function that is then called by the child components instead of passing data directly from parent to
child.This gives us a way to communicate back from the child to the parent with help of such a function.



STATES
const[c,x]=useState([])

FETCHING USER INPUT (TWO WAY BING)
event.tagret.value

---------------============-----------------------------------=-==-=-

BUILDING A STANDLONE FROTEND SPA
add folder in source named as places inside it make pages and
components folder 
add folder in source named as user inside it make pages and
components folder 
places->pages & components
user ->pages& components
shared folder ->  components


npm start
npm install --save react-router-dom  


















      



















































































