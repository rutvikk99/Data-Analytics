JAVASCRIPT W3 SCHOOLS 
<---------------------------------------------------------------->
JavaScript Can Change HTML Content
One of many JavaScript HTML methods is getElementById().
Example
document.getElementById("demo").innerHTML = "Hello JavaScript";
JavaScript accepts both double and single quotes:.
Example
document.getElementById('demo').innerHTML = 'Hello JavaScript';

JavaScript Can Change HTML Attribute Values

JavaScript Can Change HTML Styles (CSS)
Changing the style of an HTML element, is a variant of changing an HTML attribute:
Example
document.getElementById("demo").style.fontSize = "35px";
JavaScript Can Hide HTML Elements
Hiding HTML elements can be done by changing the display style:
Example
document.getElementById("demo").style.display = "none";
JavaScript Can Show HTML Elements
Showing hidden HTML elements can also be done by changing the display style:
document.getElementById("demo").style.display = "block";



In HTML, JavaScript code is inserted between <script> and </script> tags.
<script> </script>
JavaScript Functions and Events
A JavaScript function is a block of JavaScript code, that can be executed when "called" for.
For example, a function can be called when an event occurs, like when the user clicks a button.

JS can be placed in head or body
JS in head
Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.
External JavaScript
<script src=index.js></script> 
External scripts cannot contain <script> tags.

how to display data in jS
innerHTML()
document.write()
window.alert()
console.log()

Using document.write() after an HTML document is loaded, will delete all existing HTML
The document.write() method should only be used for testing.

JS VARIABLE
var a;
let b;
let c=a+b;
fixed values =literals
variable values = variable

operators +-*/% ** ++ --
assignment operator =
comments = //
/* */-multiline comments
A JavaScript name must begin with:
A letter (A-Z or a-z)
A dollar sign ($)
Or an underscore (_)
Subsequent characters may be letters, digits, underscores, or dollar signs.
All JavaScript identifiers are case sensitive. 

var CarName;
let person ="john",car="audi",price=200;
5 +"5" =55 // string concat

Variables defined with let cannot be Redeclared.
it will give syntax error
global scope and block scope 
Variables defined with const cannot be Redeclared.

Use const when you declare:

A new Array
A new Object
A new Function
A new RegExp


operator 
+= x+=y  x=x+y
string str1+" "+str2
num+string =string

comparison 
> < = ! != == === >= <= ?

logical oprator
&&
||
!

bitwise operator
& |  ~ ^ << >>  >>>

Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-)
When using parentheses, the operations inside the parentheses are computed first.
When many operations have the same precedence (like addition and subtraction), they are computed from left to right:

if the first operand is string all  other operand are treated as string 

it is dynamic types
let x;
x=6;
x="xyx";

booleans 
true or false

arrays 
const cars =[]
objects
const person ={person ="xxy"};

JS FUNCTION
A JavaScript function is a block of code designed to perform a particular task. 
AND IT is executed when "something" invokes it (calls it).

function fun(x,y) {
return x+y;
}

function used as variable values
let x =fun(2,3);

local variable =variable inside the function

OBJECTs
In real life, a car is an object.
A car has properties like weight and color, and methods like start and stop:
Object
Properties -car.name = Fiat car.model = 500 car.weight = 850kg car.color = white	
Methods  car.start() car.drive() car.brake() car.stop()
All cars have the same properties,
but the property values differ from car to car.
All cars have the same methods, but the methods are performed at different times.



object property
const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
	fullName : function() {
    return this.firstName + " " + this.lastName;
};

person.age;
person["age"]

method name = person.fullName();

In JavaScript, the this keyword refers to an object.
Methods like call(), apply(), and bind() can refer this to any object.

An HTML event can be something the browser does, or something a user does.
Here are some examples of HTML events:
An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked

common HTML events
onclick onchange onmouseover onload

Event handlers can be used to handle and verify user input, user actions, and browser actions:
JS Strings
let text="John Doe "
string.length;

\" =insert a double quote in a string 
\'=insert a single quote in a string 
\\=insert a backlash in a string 
\n = new line

string as object 
let x = new String("john")
js objects cannot be compared
Comparing two JavaScript objects always returns false.
string methods
length
slice(start, end) // end not included
substring(start, end)//
substr(start, length)//
replace()
toUpperCase()
toLowerCase()
concat()
trim() //to remove white space
charAt()
Converting a String to an Array
A string can be converted to an array with the split() method:

search method
String indexOf()
String lastIndexOf()
String startsWith()
String endsWith()

Template Literals
Template Strings
String Templates
Back-Tics Syntax

let text = `He's often called "Johnny"`;

array
const car =["tesla","audi","bmw"]
const cars = new Array("Saab", "Volvo", "BMW");
array are objects

pop
push
shift
unshift

merge two arrays 
const myGirls = ["Cecilie", "Lone"];
const myBoys = ["Emil", "Tobias", "Linus"];
const 
merge 3 arrays
const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin", "Morgan"];
const myChildren = arr1.concat(arr2, arr3);

splice()// add element in the array
sort()

const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});



























































